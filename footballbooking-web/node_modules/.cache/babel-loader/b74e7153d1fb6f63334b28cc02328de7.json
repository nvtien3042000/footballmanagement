{"ast":null,"code":"import axios from 'axios';\nimport queryString from 'query-string'; // Set up default config for http requests here\n// Please have a look at here `https://github.com/axios/axios#request- config` for the full list of configs\n\nconst axiosClient = axios.create({\n  baseURL: 'http://localhost:8080',\n  headers: {\n    'content-type': 'application/json;charset=utf-8'\n  },\n  paramsSerializer: params => queryString.stringify(params)\n});\naxiosClient.interceptors.request.use(async config => {\n  // Handle token here ...\n  return config;\n});\naxiosClient.interceptors.response.use(response => {\n  if (response && response.data) {\n    return response.data;\n  }\n\n  return response;\n}, error => {\n  // Handle errors\n  throw error;\n});\nexport default axiosClient;","map":{"version":3,"sources":["E:/DA/footballbooking/footballbooking-web/src/api/axiosClient.js"],"names":["axios","queryString","axiosClient","create","baseURL","headers","paramsSerializer","params","stringify","interceptors","request","use","config","response","data","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,cAAxB,C,CAEA;AACA;;AACA,MAAMC,WAAW,GAAGF,KAAK,CAACG,MAAN,CAAa;AAC7BC,EAAAA,OAAO,EAAE,uBADoB;AAE7BC,EAAAA,OAAO,EAAE;AACL,oBAAgB;AADX,GAFoB;AAK7BC,EAAAA,gBAAgB,EAAEC,MAAM,IAAIN,WAAW,CAACO,SAAZ,CAAsBD,MAAtB;AALC,CAAb,CAApB;AAQAL,WAAW,CAACO,YAAZ,CAAyBC,OAAzB,CAAiCC,GAAjC,CAAqC,MAAOC,MAAP,IAAkB;AACnD;AACA,SAAOA,MAAP;AACH,CAHD;AAKAV,WAAW,CAACO,YAAZ,CAAyBI,QAAzB,CAAkCF,GAAlC,CAAuCE,QAAD,IAAc;AAChD,MAAIA,QAAQ,IAAIA,QAAQ,CAACC,IAAzB,EAA+B;AAC3B,WAAOD,QAAQ,CAACC,IAAhB;AACH;;AAED,SAAOD,QAAP;AACH,CAND,EAMIE,KAAD,IAAW;AACV;AACA,QAAMA,KAAN;AACH,CATD;AAWA,eAAeb,WAAf","sourcesContent":["import axios from 'axios';\r\nimport queryString from 'query-string';\r\n\r\n// Set up default config for http requests here\r\n// Please have a look at here `https://github.com/axios/axios#request- config` for the full list of configs\r\nconst axiosClient = axios.create({\r\n    baseURL: 'http://localhost:8080',\r\n    headers: {\r\n        'content-type': 'application/json;charset=utf-8'\r\n    },\r\n    paramsSerializer: params => queryString.stringify(params),\r\n});\r\n\r\naxiosClient.interceptors.request.use(async (config) => {\r\n    // Handle token here ...\r\n    return config;\r\n});\r\n\r\naxiosClient.interceptors.response.use((response) => {\r\n    if (response && response.data) {\r\n        return response.data;\r\n    }\r\n\r\n    return response;\r\n}, (error) => {\r\n    // Handle errors\r\n    throw error;\r\n});\r\n\r\nexport default axiosClient; "]},"metadata":{},"sourceType":"module"}